// ========================================================================= //
// * Engine
// Copyright (C) 2015 Jordan Sparks. All Rights Reserved.
// Unauthorized copying of this file, via any medium is strictly prohibited.
// Proprietary and confidential.
// Written by Jordan Sparks <unixunited@live.com> January 2015.
// ========================================================================= //
// File: Input.hpp
// Author: Jordan Sparks <unixunited@live.com>
// ========================================================================= //
// Defines Input class.
// ========================================================================= //

#ifndef __INPUT_HPP__
#define __INPUT_HPP__

// ========================================================================= //

#include "stdafx.hpp"

// ========================================================================= //

class Command;
struct CommandRepository;
class Entity;

typedef std::shared_ptr<Command> CommandPtr;
typedef Entity* EntityPtr;

typedef std::map<unsigned int, CommandPtr, std::less<unsigned int>> KeyMap;
typedef KeyMap::value_type KM_VT;

// ========================================================================= //
// Handles input events generated by SDL. Delegates those events to either the 
// player Entity or the GUI by sending a message. The pointers to these two
// objects must be set manually.
class Input
{
public:
	// Default initializes player and gui pointers to nullptr.
	explicit Input(void);

	// Empty destructor.
	~Input(void);

	// Processes SDL input events. Returns a StateEvent if needed.
	const CommandPtr handle(const SDL_Event&);

	enum Mode{
		PLAYER = 0,
		UI,
		LOCKED
	};

	// Getters:

	// Returns current Input mode.
	const Mode getMode(void) const;

	// Setters:

	// Sets the mode of the Input handler.
	void setMode(const Mode);

private:
	std::shared_ptr<CommandRepository> m_commandRepo;
	KeyMap m_keymap;

	Mode m_mode;
};

// ========================================================================= //

// Getters:

inline const Input::Mode Input::getMode(void) const{
	return m_mode;
}

// Setters:

inline void Input::setMode(const Mode mode){
	m_mode = mode;
	if (m_mode == Mode::PLAYER){
		SDL_SetRelativeMouseMode(SDL_TRUE);
	}
	else if (m_mode == Mode::UI){
		SDL_SetRelativeMouseMode(SDL_FALSE);
	}
}

// ========================================================================= //

#endif

// ========================================================================= //