// ========================================================================= //
// Talos - A 3D game engine with network multiplayer.
// Copyright(C) 2015 Jordan Sparks <unixunited@live.com>
//
// This program is free software; you can redistribute it and / or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or(at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
// ========================================================================= //
// File: Input.hpp
// Author: Jordan Sparks <unixunited@live.com>
// ========================================================================= //
// Defines Input class.
// ========================================================================= //

#ifndef __INPUT_HPP__
#define __INPUT_HPP__

// ========================================================================= //

#include "stdafx.hpp"

// ========================================================================= //

typedef std::unordered_map<uint32_t, CommandPtr> KeyMap;

// ========================================================================= //
// Handles input events generated by SDL. Pushes any events that need handling
// into its internal queue for processing by the engine state.
class Input
{
public:
    // Default initializes player and gui pointers to nullptr.
    explicit Input(void);

    // Empty destructor.
    ~Input(void);

    // Processes SDL input events, returns corresponding command object.
    void handle(const SDL_Event& e);

    // Returns a MouseMove struct with mouse movement data.
    const MouseMove handleMouse(const SDL_Event& e);

    // Retrieves controller axis data and returns it in a struct.
    const ControllerAxisMotion handleControllerAxisMotion(const SDL_Event& e);

    // Detects movement keys and pushes events as needed.
    void update(void);

    // Holds an instance of a gamepad.
    struct Gamepad{
        SDL_GameController* controller;
        Sint32 id;
    };

    enum class Mode{
        Player = 0,
        UI,
        Locked
    };

    // Command queue:

    // Inserts command into command queue.
    void pushCommand(CommandPtr command);

    // Returns true if there are commands in the queue.
    const bool hasPendingCommand(void) const;

    // Returns pointer to next command in queue.
    CommandPtr getNextCommand(void);

    // Gamepads:

    // Sets up this gamepad for input handling.
    void addGamepad(const Sint32 id);

    // Removes this gamepad from input handling.
    void removeGamepad(const Sint32 id);

    // Detects all connect gamepads and inserts them into the list.
    void addAllConnectedGamepads(void);

    // Getters:

    // Returns current Input mode.
    const Mode getMode(void) const;

    // Setters:

    // Sets the mode of the Input handler.
    void setMode(const Mode mode);

private:
    std::shared_ptr<CommandRepository> m_commandRepo;
    KeyMap m_keymap;
    KeyMap m_gamepadMap;
    std::queue<CommandPtr> m_commands;

    // Keep a list of connected gamepads.
    std::unordered_map<Sint32, Gamepad> m_gamepads;

    Mode m_mode;
};

// ========================================================================= //

// Getters:

inline const Input::Mode Input::getMode(void) const{
    return m_mode;
}

// ========================================================================= //

#endif

// ========================================================================= //