// ========================================================================= //
// Talos - A 3D game engine with network multiplayer.
// Copyright(C) 2015 Jordan Sparks <unixunited@live.com>
//
// This program is free software; you can redistribute it and / or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or(at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
// ========================================================================= //
// File: Input.hpp
// Author: Jordan Sparks <unixunited@live.com>
// ========================================================================= //
// Defines Input class.
// ========================================================================= //

#ifndef __INPUT_HPP__
#define __INPUT_HPP__

// ========================================================================= //

#include "stdafx.hpp"

// ========================================================================= //

typedef std::unordered_map<unsigned int, CommandPtr> KeyMap;

// ========================================================================= //
// Handles input events generated by SDL. Delegates those events to either the 
// player Entity or the GUI by sending a message. The pointers to these two
// objects must be set manually.
class Input
{
public:
    // Default initializes player and gui pointers to nullptr.
    explicit Input(void);

    // Empty destructor.
    ~Input(void);

    // Processes SDL input events. Returns a StateEvent if needed.
    const CommandPtr handle(const SDL_Event&);

    enum class Mode{
        Player = 0,
        UI,
        Locked
    };

    // Getters:

    // Returns current Input mode.
    const Mode getMode(void) const;

    // Setters:

    // Sets the mode of the Input handler.
    void setMode(const Mode);

private:
    std::shared_ptr<CommandRepository> m_commandRepo;
    KeyMap m_keymap;

    Mode m_mode;
};

// ========================================================================= //

// Getters:

inline const Input::Mode Input::getMode(void) const{
    return m_mode;
}

// ========================================================================= //

#endif

// ========================================================================= //