//expand a range-compressed vector
float3 expand(float3 v){
   return (v-0.5)*2;
}

void diffuse_bump_vs(
   float4 position            : POSITION,
   float3 normal            : NORMAL,
   float2 uv               : TEXCOORD0,
   float3 tangent              : TANGENT0,   
   
   out float4 oPosition      : POSITION,
   out float3 oUv            : TEXCOORD0,
   out float3 oNormal         : TEXCOORD1,
   out float4 oObjectPosition   : TEXCOORD2,
   out float3 oTangent         : TEXCOORD3,
      
   uniform float4x4 worldViewProjMatrix )
{
   // calculate output position in clip space
   oPosition = mul(worldViewProjMatrix, position);
   // pass the main uvs straight through unchanged
   oUv.xy = uv;
   oUv.z = oPosition.z;

   // pass normal in object space
   oNormal = normal; //object space

   // pass position in object space
   oObjectPosition = position; //object space

   // pass tangent in object space
   oTangent = tangent; //object space
}

void diffuse_bump_ps(
   float3 uv            : TEXCOORD0,
   float3 normal         : TEXCOORD1,
   float4 objectPosition   : TEXCOORD2,
   float3 tangent           : TEXCOORD3, 
   
   out float4 oColour      : COLOR,

   uniform sampler2D diffuseMap0: TEXUNIT0,
   uniform sampler2D bumpMap1: TEXUNIT1,
   uniform float4 ambient,
    uniform float3 lightDif0,
    uniform float4 lightAtt0,   
    uniform float3 lightSpec0,
    uniform float4 spotlightParams,
   
   uniform float4 lightPos0,
   uniform float3 eyePosition,   
    uniform float4 spotlightDir,
	uniform sampler2D shadowMap : TEXUNIT1)
{
   //Normalize tangent and normal vector in object space
   tangent = normalize(tangent);
   normal = normalize(normal);
   
   // Form a rotation matrix out of the vectors
   float3 binormal = cross(tangent, normal);   
   float3x3 rotation = float3x3(tangent, binormal, normal);
   
   float3 lightDir = normalize(lightPos0.xyz -  (objectPosition * lightPos0.w)).xyz;

   // Calculate half-angle, eyeDir, lightdir, spotLightDir in tangent space
   float3 TSlightDir = mul(rotation, lightDir);
   float3 TSSpotLightDir = mul(rotation, spotlightDir.xyz);
   float3 eyeDir = normalize(eyePosition - objectPosition.xyz);
   float3 halfAngle = normalize(eyeDir + lightDir);
   float3 TShalfAngle = mul(rotation, halfAngle);
   
   //Calculate attenuation light
    half lightDist = length(lightPos0.xyz - objectPosition.xyz) / lightAtt0.r;
    // attenuation
    half ila = lightDist * lightDist; // quadratic falloff
    half la = 1.0 - ila;
   
   // get diffuse colour
    float4 diffuseTex = tex2D(diffuseMap0, uv.xy);

   // retrieve normalized light vector and half angle vector
   float3 lightVec = normalize(TSlightDir);
   halfAngle = normalize(TShalfAngle);
   
   // get bump map vector, expand from range-compressed
   float3 bumpVec = expand(tex2D(bumpMap1, uv.xy).xyz);   

    float3 specular = pow(max(dot(bumpVec, halfAngle), 0), 5);
    float3 diffuse = max(dot(lightVec, bumpVec), 0);
   
    //Calculate the spotlight effect
   float spot = (dot(lightVec, normalize(-TSSpotLightDir))) < spotlightParams.y ? 0 : 1;
 
    float3 diffuseContrib = (diffuse * lightDif0 * diffuseTex.rgb);
    float3 specularContrib = (specular * lightSpec0);
    float3 light0C = (diffuseContrib*0.2 + specularContrib) * la * spot;

    oColour = float4(light0C, 1);
}